<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Drafts on Hugo Future Imperfect</title>
    <link>katcipis.github.io/drafts/</link>
    <description>Recent content in Drafts on Hugo Future Imperfect</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    
	<atom:link href="katcipis.github.io/drafts/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title></title>
      <link>katcipis.github.io/drafts/composing-in-go/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>katcipis.github.io/drafts/composing-in-go/</guid>
      <description>Composing in Go Talk about Go embedding and how it makes it easier to compose instead of inheritance.
Talk about law of demeter and how Go automatically generates the wrappers to apply demeter easily but without inheritance magic.
Evolve examples of how the lack of true inheritance avoid obscure errors like parent methods calling the child methods or data.
Show that functions wont accept a type if there is no exact match of the type.</description>
    </item>
    
    <item>
      <title></title>
      <link>katcipis.github.io/drafts/from-python2-to-python3/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>katcipis.github.io/drafts/from-python2-to-python3/</guid>
      <description>Talk about this kind of fun :-)
 if isinstance(image, str): #Yaay Python fun, b64encode needs a bytes array image = bytes(image, &amp;quot;utf-8&amp;quot;) #OMG, PYTHON IS REALLY FUN: #http://stackoverflow.com/questions/24369666/typeerror-b1-is-not-json-serializable #Now I have to convert it back to strings :-) #How you can fuck up that bad after 10 years of experience to improve the language ? #Why in the FUCKING HELL does b64encode returns a byte array ? #This is base64, it is ALWAYS AN ASCII STRING, are these guys retarded ?</description>
    </item>
    
    <item>
      <title></title>
      <link>katcipis.github.io/drafts/go-vendoring-problem/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>katcipis.github.io/drafts/go-vendoring-problem/</guid>
      <description> Go vendoring problem Does Go really have a vendoring problem ?
A lot of thought has been put on dependencies management:
https://www.youtube.com/watch?v=sln-gJaURzk
 Do we really need versions ? Big merge requests just make the deps explicit Explicit is good Get real with the fact that it is your code too Reproducible builds are good  </description>
    </item>
    
    <item>
      <title></title>
      <link>katcipis.github.io/drafts/handwritten-mocks/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>katcipis.github.io/drafts/handwritten-mocks/</guid>
      <description> Mocks: to write or not to write Advantages:
 More high level and more specific error messages More control over behaviour, generic stuff tends to bite (my previous post) Less dependencies Favors Fakes instead of Mocks  Disadvantages:
 More work/time spent ? (not that much really) Space to bugs (the libs you use don&amp;rsquo;t have bugs ?)  </description>
    </item>
    
    <item>
      <title></title>
      <link>katcipis.github.io/drafts/insights-business-from-code/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>katcipis.github.io/drafts/insights-business-from-code/</guid>
      <description>Insights from business logic Talk about direct instrumentation VS blackbox extraction.
Talk about the 3 approaches I used:
 Using metric stuff directly Injecting metric stuff (interfaces) Exposing interesting info as events direct as domain logic  Advantages of exposing events:
 Decoupled Easier to test (the idea came from there) Easier to have more than one UI for the insights  Was upset with the intrusion of instrumentation, perhaps this kind of insight should be modeled on the domain logic, there comes the event like approach.</description>
    </item>
    
    <item>
      <title></title>
      <link>katcipis.github.io/drafts/learning-go/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>katcipis.github.io/drafts/learning-go/</guid>
      <description>The Go learning experience How to learn Go ? The good The bad Vendoring Method Sets Channels asymmetrical behaviour Practices Testing  Table driven tests (how they make more clear it is the same test with diff input/output) Setup/Teardown using functions Build tags in tests Parallelism problems and shared state on tests  TODO: Talk about the problem with each package executing in parallel (-p) thing
Coverage Static analysis Error handling All alternatives besides error handling through abstractions results on lost of capacity to do proper dependency inversion</description>
    </item>
    
    <item>
      <title></title>
      <link>katcipis.github.io/drafts/oo-fallacies/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>katcipis.github.io/drafts/oo-fallacies/</guid>
      <description>This post is based on this great talk Uncle Bob gave at Yale and some experiences I had in my life developing software in C/C++/Java.
Disclaimer I have no intention of proving that C is the best language on the world, neither prove that object orientation is bad (this includes object oriented languages).
I like object orientation and use it quite often. This is just a reality check :-). I learned to develop software using object orientation, so I&amp;rsquo;am strongly biased to over objectify everything :-).</description>
    </item>
    
    <item>
      <title></title>
      <link>katcipis.github.io/drafts/practicing-rest/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>katcipis.github.io/drafts/practicing-rest/</guid>
      <description>Key Concepts  Scalability by decoupling client from server. Caching is a way of decoupling and helps on scalability. The more decoupled and scalable, the harder it gets to be consistent (applies to databases too :-). A REST API is explorable (HATEOAS), the contract is not documented on detail. URI templating is not REST, you only know entry points. Auto documentation by using HTTP idioms, uniform interfaces (eg. CRUD). What needs to be documented should be done in-band with the service, not out-of-band on another place (rel links with documentation).</description>
    </item>
    
    <item>
      <title></title>
      <link>katcipis.github.io/drafts/python-crappy-lambda/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>katcipis.github.io/drafts/python-crappy-lambda/</guid>
      <description>​[1:10] for start in _frame_delimiters: for end in _frame_delimiters: #If you think pointers are horrible, references are worse&amp;hellip;at least #pointers are explicit about what is happening s = start e = end funcs.append(lambda partners_info: _frame_by(partners_info, s, e))
a cada iteracao do loop eu altero o lambda previamente criado
​[1:10] esse for ae nao funcionou, apesar de lexicamente eu estar criando variaveis novas, s e
​[1:10] for start in _frame_delimiters: for end in _frame_delimiters: #If you think pointers are horrible, references are worse&amp;hellip;at least #pointers are explicit about what is happening funcs.</description>
    </item>
    
    <item>
      <title></title>
      <link>katcipis.github.io/drafts/python-exception-handling/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>katcipis.github.io/drafts/python-exception-handling/</guid>
      <description>How to handle when you acquire two resources that must be manually released ? In go it would be trivial using defer, in exception oriented languages, well, not that good.
tempdir = tempfile.mkdtemp() try: driver = _new_firefox_driver(_get_firefox_profile(tempdir)) try: return _download_csv(driver, tempdir, row) finally: driver.close() finally: shutil.rmtree(tempdir)</description>
    </item>
    
    <item>
      <title></title>
      <link>katcipis.github.io/drafts/release-the-kraken/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>katcipis.github.io/drafts/release-the-kraken/</guid>
      <description>Release the Kraken !!! The problem Design How to do proper timeouts ? How to test concurrency ? How to test integration with paid services ?  Mocks ? Integration contract testing ? Build tag ?  Handling errors Non critical errors, how to accumulate them ?</description>
    </item>
    
    <item>
      <title></title>
      <link>katcipis.github.io/drafts/tdd/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>katcipis.github.io/drafts/tdd/</guid>
      <description>Talk about the process of learning TDD, mistakes made. Use personal notes ;-).
 Manual Test is Unsustainable.  Why TDD ?  Repeatable proof  Talk about how Uncle Bob thought that TDD was stupid and took 3 years to get it properly.
##Why rules ?
Not a single line of code must be written without a failing test.
TODO: Read the rules as originally written by Kent Beck.</description>
    </item>
    
    <item>
      <title></title>
      <link>katcipis.github.io/drafts/why-go/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>katcipis.github.io/drafts/why-go/</guid>
      <description>First some context
For me it makes no sense to talk about why a decision has been made without any context. So I will try to give some context on what was happening when we decided to give Go a shot.
We started to work at Neoway with the Go language for a year and a half right now, and on this essay I will try to pass on some of the experience of learning Go.</description>
    </item>
    
  </channel>
</rss>