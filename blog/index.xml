<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Blog on (define katcipis (λ (write gibberish)))</title>
    <link>https://katcipis.github.io/blog/</link>
    <description>Recent content in Blog on (define katcipis (λ (write gibberish)))</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 15 Jul 2018 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://katcipis.github.io/blog/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>The RESTless struggle for RESTfulness</title>
      <link>https://katcipis.github.io/blog/restless-restful/</link>
      <pubDate>Sun, 15 Jul 2018 00:00:00 +0000</pubDate>
      
      <guid>https://katcipis.github.io/blog/restless-restful/</guid>
      <description>The RESTless struggle for RESTfulness This post will be about my history trying to understand REST and RESTfulness (whatever that is, spoiler alert, I&amp;rsquo;m not going to define what it is), what worked for me and what sidetracked me.
As I evolve my ideas do not confuse that with me being sure of anything, I&amp;rsquo;m still not sure of shit until now, the only thing I&amp;rsquo;m sure is that repeating the same mistakes is not a good idea, but how to make new ones is another history.</description>
    </item>
    
    <item>
      <title>Object Orientation in Go</title>
      <link>https://katcipis.github.io/blog/object-orientation-go/</link>
      <pubDate>Sun, 03 Dec 2017 00:00:00 +0000</pubDate>
      
      <guid>https://katcipis.github.io/blog/object-orientation-go/</guid>
      <description>Here I try to share my journey understanding how Go approaches object orientation and how in the end it seems much more object oriented than most &amp;ldquo;traditional&amp;rdquo; object oriented languages.
On a previous post I explored the idea of expressing everything just with functions, and that Go objects are actually just a safe way to express a set of functions that always go together with the same closure and may operate on same state.</description>
    </item>
    
    <item>
      <title>Hacking Go&#39;s type system</title>
      <link>https://katcipis.github.io/blog/hack-go-types/</link>
      <pubDate>Fri, 21 Apr 2017 00:00:00 +0000</pubDate>
      
      <guid>https://katcipis.github.io/blog/hack-go-types/</guid>
      <description>Are you in the mood for a stroll inside Go&amp;rsquo;s type system ? If you are already familiarized with it, this post can be funny for you, or just plain stupid.
If you have no idea how types and interfaces are implemented on Go, you may learn something, I sure did :-)
Since I worked with handwritten type systems in C, like the one found in glib GObjects, I&amp;rsquo;m always curious on how languages implement the concept of type safety on a machine that actually only has numbers.</description>
    </item>
    
    <item>
      <title>Exploring Go&#39;s objects</title>
      <link>https://katcipis.github.io/blog/exploring-go-objects/</link>
      <pubDate>Tue, 28 Mar 2017 00:00:00 +0000</pubDate>
      
      <guid>https://katcipis.github.io/blog/exploring-go-objects/</guid>
      <description>I started to understand Go&amp;rsquo;s object model easier when I accepted that there is no objects at all, there is just sets of functions that can operate on common state, with some sugar sprinkled on top.
Perhaps you are thinking &amp;ldquo;shut up, of course there are objects in Go&amp;rdquo; or &amp;ldquo;sets of functions that operates on common state is the definition of an object&amp;rdquo;, well, you are probably right.</description>
    </item>
    
    <item>
      <title>Having fun with Go&#39;s nil, interfaces and errors</title>
      <link>https://katcipis.github.io/blog/fun-nil-interfaces/</link>
      <pubDate>Sat, 27 Aug 2016 00:00:00 +0000</pubDate>
      
      <guid>https://katcipis.github.io/blog/fun-nil-interfaces/</guid>
      <description>Learning and programming in Go has been delightful 99% of the time, This makes even more remarkable when the language bites you in the ass :-). Actually it is a mix of my own ignorance + some other details, but for everyone that I presented this situation it did not seem like something obvious and intuitive.
A few weeks ago I have watched the Understanding Nil presentation, it is great way to really understand what nil is in Go, and I had no idea nil could behave as explained on the presentation.</description>
    </item>
    
    <item>
      <title>Why Go ?</title>
      <link>https://katcipis.github.io/blog/why-go/</link>
      <pubDate>Sat, 27 Aug 2016 00:00:00 +0000</pubDate>
      
      <guid>https://katcipis.github.io/blog/why-go/</guid>
      <description>For me it makes no sense to talk about why a decision has been made without any context. So I will try to give some context on what was happening when we decided to give Go a shot.
We started to work at Neoway with the Go language for a year and a half right now, and on this post I will try to pass on some of the experience of learning Go.</description>
    </item>
    
  </channel>
</rss>