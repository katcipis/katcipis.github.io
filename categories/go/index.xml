<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Go on (katcipis (λ (write gibberish)))</title>
    <link>https://katcipis.github.io/categories/go/</link>
    <description>Recent content in Go on (katcipis (λ (write gibberish)))</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 28 Mar 2017 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://katcipis.github.io/categories/go/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Exploring Go&#39;s objects</title>
      <link>https://katcipis.github.io/blog/exploring-go-objects/</link>
      <pubDate>Tue, 28 Mar 2017 00:00:00 +0000</pubDate>
      
      <guid>https://katcipis.github.io/blog/exploring-go-objects/</guid>
      <description>I started to understand Go&amp;rsquo;s object model easier when I accepted that there is no objects at all, there is just sets of functions that can operate on common state, with some sugar sprinkled on top.
Perhaps you are thinking &amp;ldquo;shut up, of course there are objects in Go&amp;rdquo; or &amp;ldquo;sets of functions that operates on common state is the definition of an object&amp;rdquo;, well, you are probably right.</description>
    </item>
    
    <item>
      <title>Hacking Go&#39;s type system</title>
      <link>https://katcipis.github.io/blog/hack-go-types/</link>
      <pubDate>Tue, 28 Mar 2017 00:00:00 +0000</pubDate>
      
      <guid>https://katcipis.github.io/blog/hack-go-types/</guid>
      <description>Are you in the mood for a stroll inside Go&amp;rsquo;s type system ? If you are already familiarized with it, this post can be funny for you, or just plain stupid.
If you have no idea how types and interfaces are implemented on Go, you may learn something, I sure did :-)
Since I worked with handwritten type systems in C, like the one found in glib GObjects, I&amp;rsquo;m always curious on how languages implement the concept of type safety on a machine that actually only has numbers.</description>
    </item>
    
    <item>
      <title>Having fun with Go&#39;s nil, interfaces and errors</title>
      <link>https://katcipis.github.io/blog/fun-nil-interfaces/</link>
      <pubDate>Sat, 27 Aug 2016 00:00:00 +0000</pubDate>
      
      <guid>https://katcipis.github.io/blog/fun-nil-interfaces/</guid>
      <description>Learning and programming in Go has been delightful 99% of the time, This makes even more remarkable when the language bites you in the ass :-). Actually it is a mix of my own ignorance + some other details, but for everyone that I presented this situation it did not seem like something obvious and intuitive.
A few weeks ago I have watched the Understanding Nil presentation, it is great way to really understand what nil is in Go, and I had no idea nil could behave as explained on the presentation.</description>
    </item>
    
    <item>
      <title>Why Go ?</title>
      <link>https://katcipis.github.io/blog/why-go/</link>
      <pubDate>Sat, 27 Aug 2016 00:00:00 +0000</pubDate>
      
      <guid>https://katcipis.github.io/blog/why-go/</guid>
      <description>For me it makes no sense to talk about why a decision has been made without any context. So I will try to give some context on what was happening when we decided to give Go a shot.
We started to work at Neoway with the Go language for a year and a half right now, and on this post I will try to pass on some of the experience of learning Go.</description>
    </item>
    
  </channel>
</rss>